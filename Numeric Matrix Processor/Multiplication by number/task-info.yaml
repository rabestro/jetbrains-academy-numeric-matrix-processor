type: edu
custom_name: stage2
files:
- name: src/processor/Main.java
  visible: true
  text: |
    package processor;

    public class Main {
        public static void main(String[] args) {
            new Application().run();
        }
    }
  learner_created: false
- name: src/processor/Matrix.java
  visible: true
  text: |
    package processor;

    import java.util.stream.Collectors;

    import static java.util.stream.IntStream.range;

    public class Matrix {
        private final int rows;
        private final int cols;
        private final int[] cells;

        public Matrix(int rows, int cols) {
            this(rows, cols, new int[rows * cols]);
        }

        public Matrix(int rows, int cols, int[] cells) {
            if (cells.length != rows * cols) {
                throw new IllegalArgumentException();
            }
            this.rows = rows;
            this.cols = cols;
            this.cells = cells;
        }

        public int getRows() {
            return rows;
        }

        public int getCols() {
            return cols;
        }

        Matrix add(Matrix other) {
            if (this.rows != other.rows || this.cols != other.cols) {
                throw new IllegalArgumentException("ERROR");
            }

            final var sumOfMatrices = range(0, cells.length)
                    .map(i -> this.cells[i] + other.cells[i])
                    .toArray();

            return new Matrix(rows, cols, sumOfMatrices);
        }

        @Override
        public String toString() {
            return range(0, cells.length)
                    .mapToObj(i -> (i + 1) % cols == 0 ? cells[i] + "\n" : cells[i] + " ")
                    .collect(Collectors.joining());
        }
    }
  learner_created: false
- name: src/processor/Application.java
  visible: true
  text: |
    package processor;

    import java.util.Scanner;

    public class Application {

        void run() {
            final var scanner = new Scanner(System.in);

            final var a = read(scanner);
            final var b = read(scanner);

            try {
                final var c = a.add(b);
                System.out.println(c);
            } catch (IllegalArgumentException e) {
                System.out.println(e.getMessage());
            }

        }

        Matrix read(Scanner scanner) {
            final var rows = scanner.nextInt();
            final var cols = scanner.nextInt();
            final var cells = scanner.tokens()
                    .limit(rows * cols)
                    .mapToInt(Integer::parseInt)
                    .toArray();

            return new Matrix(rows, cols, cells);
        }
    }
  learner_created: false
- name: test/NumericMatrixProcessorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.SimpleTestCase;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;
    import java.util.stream.Collectors;

    public class NumericMatrixProcessorTest extends StageTest {

        @Override
        public List<TestCase> generate() {
            return List.of(
                new SimpleTestCase(
                    "3 3\n" +
                        "1 2 3\n" +
                        "4 5 6\n" +
                        "7 8 9\n" +
                        "3",
                    "3 6 9\n" +
                        "12 15 18\n" +
                        "21 24 27"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "2 3\n" +
                        "1 2 3\n" +
                        "4 5 6\n" +
                        "0",
                    "0 0 0\n" +
                        "0 0 0"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "5 5\n" +
                        "1 4 6 7 8\n" +
                        "1 9 5 2 2\n" +
                        "1 4 3 5 7\n" +
                        "1 4 6 4 1\n" +
                        "1 4 5 7 1\n" +
                        "5",
                    "5 20 30 35 40\n" +
                        "5 45 25 10 10\n" +
                        "5 20 15 25 35\n" +
                        "5 20 30 20 5\n" +
                        "5 20 25 35 5"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "1 1\n" +
                        "1\n" +
                        "1",
                    "1"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "1 1\n" +
                        "0\n" +
                        "1",
                    "0"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "3 2\n" +
                        "1 2\n" +
                        "8 1\n" +
                        "9 1\n" +
                        "10",
                    "10 20\n" +
                        "80 10\n" +
                        "90 10"
                ).setCheckFunc(this::checkSolved)
            );
        }

        private CheckResult checkSolved(String reply, String clue) {

            clue = clue.strip();
            reply = reply.strip();

            if (reply.equals(clue)) {
                return CheckResult.correct();
            }

            if (clue.equals("ERROR")) {
                return CheckResult.wrong("");
            }

            List<String> user = reply.lines().collect(Collectors.toList());
            List<String> answ = clue.lines().collect(Collectors.toList());

            if (user.size() != answ.size()) {
                return CheckResult.wrong("");
            }

            for (int i = 0; i < user.size(); i++) {
                String userLine = user.get(i).strip();
                String answLine = answ.get(i).strip();
                if (!userLine.equals(answLine)) {
                    return CheckResult.wrong("");
                }
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/60/stages/324/implement#comment
status: Solved
record: 1
